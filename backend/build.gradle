//import se.bjurr.violations.gradle.plugin.ViolationsTask

plugins {
    id 'java'
    id 'groovy'
    id 'idea'
    id 'org.springframework.boot' version '3.3.4'
    id 'io.spring.dependency-management' version '1.1.6'
//    id 'se.bjurr.violations.violations-gradle-plugin' version '1.52.7'
}

group = 'com.imckify'
version = '0.0.1-SNAPSHOT'

apply from: 'publish.gradle'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

tasks.jar.enabled = false

test {
    useJUnitPlatform()
}

tasks.register('addFrontendToBackend', Copy) {
    dependsOn(':frontend:assemble')
    from "$rootDir/frontend/build"
    into "$buildDir/resources/main/static/."
}

processResources.dependsOn addFrontendToBackend

//idea {
//    module {
//        testSourceDirs += file('src/test/groovy')
//    }
//}

apply plugin: 'checkstyle'

checkstyleMain.exclude '**/generated-sources/**'

checkstyleMain {
    configFile = rootProject.file('config/checkstyle_rules.xml')
    source = file('backend/src/main/java')
    ignoreFailures = true
}
//
//checkstyleTest {
//    configFile = rootProject.file('config/checkstyle_rules.xml')
//    source ='backend/src/test/java'
//}
//
//tasks.withType(Checkstyle) {
//    classpath = files()     //improve Checkstyle task caching - don't re-execute if 'domain' is changed
//
//    reports {
//        html.required = false
//        xml.required = true
//    }
//}
//
//apply plugin: 'codenarc'
//
//codenarcMain {
//    source = 'backend/src/main/groovy'
//    ignoreFailures = true
//}
//
//codenarcTest {
//    source = 'backend/src/test/groovy'
//}
//
//tasks.withType(CodeNarc) {
//    configFile = rootProject.file('config/codenarc_rules.xml')
//    reports {
//        html.required = false
//        xml.required = true
//    }
//
//}
//
//task violations(type: ViolationsTask) {
//    maxRuleColumnWidth = 60
//    maxMessageColumnWidth = 50
//    codeClimateFile = file('./backend/build/reports/code-climate.json')
//
//    maxViolations = 0
//    printViolations = false
//
//    diffMaxViolations = 0
//    diffPrintViolations = false
//
//    violations = [
//            ["CHECKSTYLE", projectDir.path, ".*/checkstyle/.*\\.xml\$", "Checkstyle"],
//            ["CODENARC", projectDir.path, ".*/codenarc/.*\\.xml\$", "CodeNarc"]
//    ] as List<List<String>>
//}